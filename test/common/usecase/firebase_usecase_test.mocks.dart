// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_mobile_app_template/test/common/usecase/firebase_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_mobile_app_template/repository/firebase_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FirebaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRepository extends _i1.Mock
    implements _i2.FirebaseRepository {
  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setUserId(String? id) =>
      (super.noSuchMethod(Invocation.method(#setUserId, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> logCurrentScreen(String? screenName) =>
      (super.noSuchMethod(Invocation.method(#logCurrentScreen, [screenName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> logAppError(String? errorLog) =>
      (super.noSuchMethod(Invocation.method(#logAppError, [errorLog]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> recordError(Object? exception, {StackTrace? stackTrace}) =>
      (super.noSuchMethod(
          Invocation.method(
              #recordError, [exception], {#stackTrace: stackTrace}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> recordFlutterError(Object? exception,
          {StackTrace? stackTrace}) =>
      (super.noSuchMethod(
          Invocation.method(
              #recordFlutterError, [exception], {#stackTrace: stackTrace}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> fetchServiceMaintenanceFlag(
          Duration? fetchTimeout, Duration? minimumFetchInterval) =>
      (super.noSuchMethod(
          Invocation.method(#fetchServiceMaintenanceFlag,
              [fetchTimeout, minimumFetchInterval]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
